/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsOfServiceRouteImport } from './routes/terms-of-service'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DownloadWindowsRouteImport } from './routes/download/windows'
import { Route as DownloadMacosRouteImport } from './routes/download/macos'
import { Route as DownloadLinuxRouteImport } from './routes/download/linux'

const TermsOfServiceRoute = TermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadWindowsRoute = DownloadWindowsRouteImport.update({
  id: '/download/windows',
  path: '/download/windows',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadMacosRoute = DownloadMacosRouteImport.update({
  id: '/download/macos',
  path: '/download/macos',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadLinuxRoute = DownloadLinuxRouteImport.update({
  id: '/download/linux',
  path: '/download/linux',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/download/linux': typeof DownloadLinuxRoute
  '/download/macos': typeof DownloadMacosRoute
  '/download/windows': typeof DownloadWindowsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/download/linux': typeof DownloadLinuxRoute
  '/download/macos': typeof DownloadMacosRoute
  '/download/windows': typeof DownloadWindowsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/download/linux': typeof DownloadLinuxRoute
  '/download/macos': typeof DownloadMacosRoute
  '/download/windows': typeof DownloadWindowsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/download/linux'
    | '/download/macos'
    | '/download/windows'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/download/linux'
    | '/download/macos'
    | '/download/windows'
  id:
    | '__root__'
    | '/'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/download/linux'
    | '/download/macos'
    | '/download/windows'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  TermsOfServiceRoute: typeof TermsOfServiceRoute
  DownloadLinuxRoute: typeof DownloadLinuxRoute
  DownloadMacosRoute: typeof DownloadMacosRoute
  DownloadWindowsRoute: typeof DownloadWindowsRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download/windows': {
      id: '/download/windows'
      path: '/download/windows'
      fullPath: '/download/windows'
      preLoaderRoute: typeof DownloadWindowsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download/macos': {
      id: '/download/macos'
      path: '/download/macos'
      fullPath: '/download/macos'
      preLoaderRoute: typeof DownloadMacosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download/linux': {
      id: '/download/linux'
      path: '/download/linux'
      fullPath: '/download/linux'
      preLoaderRoute: typeof DownloadLinuxRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
  DownloadLinuxRoute: DownloadLinuxRoute,
  DownloadMacosRoute: DownloadMacosRoute,
  DownloadWindowsRoute: DownloadWindowsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
