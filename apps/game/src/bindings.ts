
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getReplayGain(path: string) : Promise<Result<ReplayGainInfo, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_replay_gain", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getMicrophones() : Promise<Result<Microphone[], AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_microphones") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startRecording(options: MicrophoneOptions[], samplesPerBeat: number) : Promise<Result<null, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_recording", { options, samplesPerBeat }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopRecording() : Promise<Result<null, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_recording") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPitch(index: number) : Promise<Result<number, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_pitch", { index }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getMediaServerBaseUrl() : Promise<Result<string | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_media_server_base_url") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async parseSongsFromPaths(paths: string[]) : Promise<Result<SongGroup[], AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("parse_songs_from_paths", { paths }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
progressEvent: ProgressEvent,
startParsingEvent: StartParsingEvent
}>({
progressEvent: "progress-event",
startParsingEvent: "start-parsing-event"
})

/** user-defined constants **/



/** user-defined types **/

export type AppError = { type: "IoError"; data: string } | { type: "LoftyError"; data: string } | { type: "RecorderError"; data: string } | { type: "ProcessorError"; data: string } | { type: "CpalError"; data: string } | { type: "UltrastarError"; data: string }
export type LocalSong = ({ title: string; artist: string; bpm: number; gap: number; videoGap: number; start: number | null; end: number | null; hash: string; album: string | null; language: string | null; edition: string | null; genre: string | null; year: number | null; creator: string | null; relative: boolean | null; audio: string | null; cover: string | null; video: string | null; background: string | null; p1: string | null; p2: string | null; previewStart: number | null; voices: Voice[] }) & { audioUrl: string | null; videoUrl: string | null; coverUrl: string | null; backgroundUrl: string | null; replayGainTrackGain: number | null; replayGainTrackPeak: number | null }
export type Microphone = { name: string; channels: number }
export type MicrophoneOptions = { name: string; channel: number; gain: number; threshold: number }
export type Note = { type: NoteType; startBeat: number; length: number; text: string; txtPitch: number; midiNote: number }
export type NoteType = "Normal" | "Golden" | "Freestyle" | "Rap" | "RapGolden"
export type Phrase = { disappearBeat: number; notes: Note[] }
export type ProgressEvent = { song: string }
export type ReplayGainInfo = { track_gain: number | null; track_peak: number | null; album_gain: number | null; album_peak: number | null }
export type SongGroup = { path: string; songs: LocalSong[] }
export type StartParsingEvent = { total_songs: number }
export type Voice = { phrases: Phrase[] }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
