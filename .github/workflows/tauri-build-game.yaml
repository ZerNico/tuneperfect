name: Build game

on:
  workflow_call:
    inputs:
      tag:
        description: 'The Git tag to build and publish (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform:
          [
            { os: 'macos-latest', target: 'aarch64-apple-darwin' },
            { os: 'macos-latest', target: 'x86_64-apple-darwin' },
            { os: 'ubuntu-22.04', target: 'x86_64-unknown-linux-gnu' },
            { os: 'windows-latest', target: 'x86_64-pc-windows-msvc' },
            { os: 'windows-latest', target: 'aarch64-pc-windows-msvc' },
          ]

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libglib2.0-dev alsa-base alsa-utils libasound2-dev pkg-config

      - name: Install ARM64 build tools (Windows ARM64 only)
        if: matrix.platform.target == 'aarch64-pc-windows-msvc'
        shell: powershell
        run: |
          # Download Visual Studio Build Tools installer
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_buildtools.exe" -OutFile "vs_buildtools.exe"
          
          # Install ARM64 build tools
          Start-Process -FilePath "vs_buildtools.exe" -ArgumentList "--quiet", "--wait", "--add", "Microsoft.VisualStudio.Workload.VCTools", "--add", "Microsoft.VisualStudio.Component.VC.Tools.ARM64" -Wait
          
          # Clean up
          Remove-Item "vs_buildtools.exe"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './apps/game/src-tauri -> target'
          shared-key: ${{ matrix.platform.target }}-${{ matrix.platform.os }}-game
          save-if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}

      - name: Install dependencies
        run: bun install

      - name: Strip v prefix from tag
        id: version
        shell: bash
        run: |
          TAG="${{ inputs.tag }}"
          echo "app_version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Build the Tauri app
        id: tauri-build
        uses: tauri-apps/tauri-action@v0
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_APP_URL: ${{ vars.VITE_APP_URL }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          projectPath: apps/game
          tauriScript: bun run tauri
          args: |
            --target ${{ matrix.platform.target }} --config '{
              "version": "${{ steps.version.outputs.app_version }}",
              "plugins": {
                "updater": {
                  "pubkey": "${{ secrets.TAURI_SIGNING_PUBLIC_KEY }}",
                  "endpoints": [
                    "https://api.${{ secrets.DOMAIN_NAME }}/v1.0/updates/{{target}}/{{arch}}/{{current_version}}"
                  ]
                }
              }
            }'

      - name: Rename app.tar.gz to match dmg naming (macOS only)
        if: matrix.platform.os == 'macos-latest'
        shell: bash
        run: |
          BUNDLE_DIR="apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle"
          
          # Find the dmg file
          DMG_FILE=$(find "$BUNDLE_DIR" -name "*.dmg" | head -1)
          
          if [ -n "$DMG_FILE" ]; then
            # Extract the base name without extension
            DMG_BASENAME=$(basename "$DMG_FILE" .dmg)
            
            # Find the app.tar.gz file
            APP_TAR_GZ=$(find "$BUNDLE_DIR" -name "*.app.tar.gz" | head -1)
            
            if [ -n "$APP_TAR_GZ" ]; then
              # Get the directory of the app.tar.gz file
              APP_DIR=$(dirname "$APP_TAR_GZ")
              
              # Rename the app.tar.gz file to match the dmg naming
              NEW_NAME="${APP_DIR}/${DMG_BASENAME}.app.tar.gz"
              mv "$APP_TAR_GZ" "$NEW_NAME"
              echo "Renamed $(basename "$APP_TAR_GZ") to $(basename "$NEW_NAME")"
              
              # Also rename the signature file if it exists
              APP_TAR_GZ_SIG="${APP_TAR_GZ}.sig"
              if [ -f "$APP_TAR_GZ_SIG" ]; then
                NEW_SIG_NAME="${NEW_NAME}.sig"
                mv "$APP_TAR_GZ_SIG" "$NEW_SIG_NAME"
                echo "Renamed $(basename "$APP_TAR_GZ_SIG") to $(basename "$NEW_SIG_NAME")"
              fi
            else
              echo "No .app.tar.gz file found"
            fi
          else
            echo "No .dmg file found"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tuneperfect-${{ matrix.platform.os }}-${{ matrix.platform.target }}
          path: |
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.exe
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.exe.sig
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.dmg
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.app.tar.gz
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.app.tar.gz.sig
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.AppImage
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.AppImage.sig
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.deb
            apps/game/src-tauri/target/${{ matrix.platform.target }}/release/bundle/**/*.rpm
          if-no-files-found: error

